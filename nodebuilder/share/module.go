package share

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/p2p/net/conngater"
	"go.uber.org/fx"

	libhead "github.com/celestiaorg/go-header"
	"github.com/celestiaorg/go-header/sync"

	"github.com/celestiaorg/celestia-node/header"
	"github.com/celestiaorg/celestia-node/nodebuilder/node"
	modp2p "github.com/celestiaorg/celestia-node/nodebuilder/p2p"
	"github.com/celestiaorg/celestia-node/share"
	"github.com/celestiaorg/celestia-node/share/availability/full"
	"github.com/celestiaorg/celestia-node/share/availability/light"
	"github.com/celestiaorg/celestia-node/share/getters"
	disc "github.com/celestiaorg/celestia-node/share/p2p/discovery"
	"github.com/celestiaorg/celestia-node/share/p2p/peers"
	"github.com/celestiaorg/celestia-node/share/p2p/shrexeds"
	"github.com/celestiaorg/celestia-node/share/p2p/shrexnd"
	"github.com/celestiaorg/celestia-node/share/p2p/shrexsub"
	"github.com/celestiaorg/celestia-node/share/shwap"
	"github.com/celestiaorg/celestia-node/share/store"
	"github.com/celestiaorg/rsmt2d"
)

func ConstructModule(tp node.Type, cfg *Config, options ...fx.Option) fx.Option {
	// sanitize config values before constructing module
	cfgErr := cfg.Validate(tp)

	baseComponents := fx.Options(
		fx.Supply(*cfg),
		fx.Error(cfgErr),
		fx.Options(options...),
		fx.Provide(newModule),
		fx.Invoke(func(disc *disc.Discovery) {}),
		fx.Provide(fx.Annotate(
			newDiscovery(cfg.Discovery),
			fx.OnStart(func(ctx context.Context, d *disc.Discovery) error {
				return d.Start(ctx)
			}),
			fx.OnStop(func(ctx context.Context, d *disc.Discovery) error {
				return d.Stop(ctx)
			}),
		)),
		fx.Provide(
			func(ctx context.Context, h host.Host, network modp2p.Network) (*shrexsub.PubSub, error) {
				return shrexsub.NewPubSub(ctx, h, network.String())
			},
		),
	)

	shrexGetterComponents := fx.Options(
		fx.Provide(func() peers.Parameters {
			return cfg.PeerManagerParams
		}),
		fx.Provide(
			func(host host.Host, network modp2p.Network) (*shrexnd.Client, error) {
				cfg.ShrExNDParams.WithNetworkID(network.String())
				return shrexnd.NewClient(cfg.ShrExNDParams, host)
			},
		),
		fx.Provide(
			func(host host.Host, network modp2p.Network) (*shrexeds.Client, error) {
				cfg.ShrExEDSParams.WithNetworkID(network.String())
				return shrexeds.NewClient(cfg.ShrExEDSParams, host)
			},
		),
		fx.Provide(fx.Annotate(
			getters.NewShrexGetter,
			fx.OnStart(func(ctx context.Context, getter *getters.ShrexGetter) error {
				return getter.Start(ctx)
			}),
			fx.OnStop(func(ctx context.Context, getter *getters.ShrexGetter) error {
				return getter.Stop(ctx)
			}),
		)),
	)

	bridgeAndFullComponents := fx.Options(
		fx.Provide(getters.NewStoreGetter),
		fx.Invoke(func(edsSrv *shrexeds.Server, ndSrc *shrexnd.Server) {}),
		fx.Provide(fx.Annotate(
			func(host host.Host, store *store.Store, network modp2p.Network) (*shrexeds.Server, error) {
				cfg.ShrExEDSParams.WithNetworkID(network.String())
				return shrexeds.NewServer(cfg.ShrExEDSParams, host, store)
			},
			fx.OnStart(func(ctx context.Context, server *shrexeds.Server) error {
				return server.Start(ctx)
			}),
			fx.OnStop(func(ctx context.Context, server *shrexeds.Server) error {
				return server.Stop(ctx)
			}),
		)),
		fx.Provide(fx.Annotate(
			func(
				host host.Host,
				store *store.Store,
				network modp2p.Network,
			) (*shrexnd.Server, error) {
				cfg.ShrExNDParams.WithNetworkID(network.String())
				return shrexnd.NewServer(cfg.ShrExNDParams, host, store)
			},
			fx.OnStart(func(ctx context.Context, server *shrexnd.Server) error {
				return server.Start(ctx)
			}),
			fx.OnStop(func(ctx context.Context, server *shrexnd.Server) error {
				return server.Stop(ctx)
			}),
		)),
		fx.Provide(fx.Annotate(
			func(path node.StorePath) (*store.Store, error) {
				return store.NewStore(cfg.EDSStoreParams, string(path))
			},
			fx.OnStart(func(ctx context.Context, store *store.Store) error {
				eds_json := `{"data_square":["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"],"codec":"Leopard"}`
				dah_json := `{"row_roots":["AAAAAAAAAAAAAAAAAAAAAAAAAAEzf36S80waQ7kAAAAAAAAAAAAAAAAAAAAAAAAAG3pNCni6pSa1SIssgvgNC+SmOhiofX9Ca/+IaADgkNufaVg8cUs6WS6q","AAAAAAAAAAAAAAAAAAAAAAAAAF5FcZEXJWtnDIgAAAAAAAAAAAAAAAAAAAAAAAAAkcPcwjQYSBmyAwq3l5QM0PW8PdKlOzK9+om2DIDL9zluRivh3do1FhpG","AAAAAAAAAAAAAAAAAAAAAAAAAKtlOkK1SdbvEnsAAAAAAAAAAAAAAAAAAAAAAAAA5X35Wi7Smfdr3BuBB8qFU7KzIxiRdzyb0KfbtpBiWjrIx3c7YV5XZZSS","AAAAAAAAAAAAAAAAAAAAAAAAAOksOb3phtppPSoAAAAAAAAAAAAAAAAAAAAAAAAA/aygEKiUNzl7v8te+bAWVjPexe0Js82HxlLEO3b5fyq2g9SO0KmU1Xzq","/////////////////////////////////////////////////////////////////////////////8F8jS+JRYLhpM+V3tFJqTjk3oET9vRsUup34Pt+txUt","/////////////////////////////////////////////////////////////////////////////zDYRMcqamIdluo9BPCco0cB8wMUVv+CrScDZ7yrN5D3","/////////////////////////////////////////////////////////////////////////////0WzfPV/f6ZS9cOgbeznkuZfPdtn6OZvPvQ3fhLnRoeB","/////////////////////////////////////////////////////////////////////////////60Miyx6hXktsmUUsOga55QOz3YUP5ZtywU7ua4K7qYi"],"column_roots":["AAAAAAAAAAAAAAAAAAAAAAAAAAEzf36S80waQ7kAAAAAAAAAAAAAAAAAAAAAAAAA6Sw5vemG2mk9KtdxYGvoTHYreM7qPc5YslUEQWV/SepR0f1wdb/97C4N","AAAAAAAAAAAAAAAAAAAAAAAAABFY78YPxPZMScgAAAAAAAAAAAAAAAAAAAAAAAAA7vmTIKRgrIV1XYguX/pDtTDm7rnyuEEV24cEQtlOe9i8QXN6z2/otBr2","AAAAAAAAAAAAAAAAAAAAAAAAABM2ZXNfPM7H8OEAAAAAAAAAAAAAAAAAAAAAAAAA8mn+c0onq1vCPvVpb6VUuXA29PFWtyqsJkoRVo1/JnO6pRuAWzUwXXxD","AAAAAAAAAAAAAAAAAAAAAAAAABt6TQp4uqUmtUgAAAAAAAAAAAAAAAAAAAAAAAAA/aygEKiUNzl7v9jSlmodd9TaZJ+LpvNBAQRpuurbJA1GZNJS0CWHVuln","/////////////////////////////////////////////////////////////////////////////wrk66jBf3U+jdcv4N2RCeRrrH/fQufLP21npJL6i3vY","/////////////////////////////////////////////////////////////////////////////+a6VXPAEIbv8g9+n9xQ4IPjEHNE/VzM1GAYp+3PBq0z","/////////////////////////////////////////////////////////////////////////////54W4WIiC4qSVlvrDw2GVVmeaZyGfRQYiYq/xIiMxfz7","/////////////////////////////////////////////////////////////////////////////5kr1oM2E8BbcM53oh+//zc6NRPk+wGHmnm9pbUGarv9"]}`

				var eds rsmt2d.ExtendedDataSquare
				err := json.Unmarshal([]byte(eds_json), &eds)
				if err != nil {
					fmt.Println("4")
					panic(err)
				}

				var dah *share.Root
				err = json.Unmarshal([]byte(dah_json), &dah)
				if err != nil {
					fmt.Println("5")
					panic(err)
				}

				_, err = store.Put(ctx, dah.Hash(), 2, &eds)
				if err != nil {
					fmt.Println("6")
					panic(err)
				}

				fmt.Println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
				fmt.Println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
				fmt.Println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
				fmt.Println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
				fmt.Println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")

				return err
			}),
		)),
		fx.Provide(fx.Annotate(
			full.NewShareAvailability,
			fx.OnStart(func(ctx context.Context, avail *full.ShareAvailability) error {
				return avail.Start(ctx)
			}),
			fx.OnStop(func(ctx context.Context, avail *full.ShareAvailability) error {
				return avail.Stop(ctx)
			}),
		)),
		fx.Provide(func(avail *full.ShareAvailability) share.Availability {
			return avail
		}),
		fx.Provide(func(shrexSub *shrexsub.PubSub) shrexsub.BroadcastFn {
			return shrexSub.Broadcast
		}),
	)

	peerManagerWithShrexPools := fx.Options(
		fx.Provide(
			func(
				params peers.Parameters,
				host host.Host,
				connGater *conngater.BasicConnectionGater,
				shrexSub *shrexsub.PubSub,
				headerSub libhead.Subscriber[*header.ExtendedHeader],
				// we must ensure Syncer is started before PeerManager
				// so that Syncer registers header validator before PeerManager subscribes to headers
				_ *sync.Syncer[*header.ExtendedHeader],
			) (*peers.Manager, error) {
				return peers.NewManager(
					params,
					host,
					connGater,
					peers.WithShrexSubPools(shrexSub, headerSub),
				)
			},
		),
	)

	switch tp {
	case node.Bridge:
		return fx.Module(
			"share",
			baseComponents,
			fx.Provide(peers.NewManager),
			bridgeAndFullComponents,
			shrexGetterComponents,
			fx.Provide(bridgeGetter),
			fx.Invoke(func(lc fx.Lifecycle, sub *shrexsub.PubSub) error {
				lc.Append(fx.Hook{
					OnStart: sub.Start,
					OnStop:  sub.Stop,
				})
				return nil
			}),
		)
	case node.Full:
		return fx.Module(
			"share",
			peerManagerWithShrexPools,
			baseComponents,
			bridgeAndFullComponents,
			shrexGetterComponents,
			fx.Provide(shwap.NewGetter),
			fx.Provide(fullGetter),
		)
	case node.Light:
		return fx.Module(
			"share",
			baseComponents,
			fx.Provide(func() []light.Option {
				return []light.Option{
					light.WithSampleAmount(cfg.LightAvailability.SampleAmount),
				}
			}),
			peerManagerWithShrexPools,
			shrexGetterComponents,
			fx.Provide(shwap.NewGetter),
			fx.Provide(lightGetter),
			// shrexsub broadcaster stub for daser
			fx.Provide(func() shrexsub.BroadcastFn {
				return func(context.Context, shrexsub.Notification) error {
					return nil
				}
			}),
			fx.Provide(fx.Annotate(
				light.NewShareAvailability,
				fx.OnStop(func(ctx context.Context, la *light.ShareAvailability) error {
					return la.Close(ctx)
				}),
			)),
			fx.Provide(func(avail *light.ShareAvailability) share.Availability {
				return avail
			}),
		)
	default:
		panic("invalid node type")
	}
}
